@page "/createfacility"
@page "/createfacility/{id:int}"
@inject IFacilityService FacilityService
@inject NavigationManager NavigationManager

@if (Id == null)
{
   <PageTitle>Create a new Facility</PageTitle>
   <h3>Create a new Facility</h3>
}
else
{
   <PageTitle>Edit @facility.FacilityName</PageTitle>
   <h3>Edit @facility.FacilityName</h3>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
   <p class="text-danger">@ErrorMessage</p>
}

<EditForm Model="facility" OnSubmit="HandleSubmit">
   <DataAnnotationsValidator />

   <div class="mt-3">
      <label>District</label><br />
      <InputSelect @bind-Value="facility.DistrictId" class="form-select">
         @foreach (var district in FacilityService.Districts)
         {
            <option value="@district.Oid">@district.DistrictName</option>
         }
      </InputSelect>
      <ValidationMessage For="@(() => facility.District.DistrictName)" />
   </div>

   <div class="mt-3">
      <label for="FacilityName">Facility</label>
      <InputText id="FacilityName" @bind-Value="facility.FacilityName" class="form-control"></InputText>
      <ValidationMessage For="@(() => facility.FacilityName)" />
   </div>

   <div class="mt-3">
      <label for="HMISCode">HMIS Code</label>
      <InputText id="HMISCode" @bind-Value="facility.HMISCode" class="form-control"></InputText>
      <ValidationMessage For="@(() => facility.HMISCode)" />
   </div>

   <div class="mt-3">
      <label for="Latitude">Latitude</label>
      <InputText id="Latitude" @bind-Value="facility.Latitude" class="form-control"></InputText>
   </div>

   <div class="mt-3">
      <label for="Longitude">Longitude</label>
      <InputText id="Longitude" @bind-Value="facility.Longitude" class="form-control"></InputText>
   </div>  

   <div class="mt-3">
      <label for="IsPrivateFacility">IsPrivateFacility</label>
      <div class="form-check">
         <input id="IsPrivateFacility" class="form-check-input" type="checkbox" @bind="facility.IsPrivateFacility">
      </div>
   </div>

   <br />

   <button type="submit" class="btn btn-primary">@btnText</button>

   @if (Id != null)
   {
      <button type="button" class="btn btn-danger mx-2" @onclick="DeleteFacility">Delete Facility</button>
   }
   else
   {
      <button type="button" class="btn btn-danger mx-2" @onclick="GoToFacilityPage">Back</button>
   }
</EditForm>

@code {
   [Parameter]
   public int? Id { get; set; }

   string btnText = string.Empty;
   string ErrorMessage = string.Empty;

   //Facility facility = new Facility { District = new District() };
   BlazorPwaApp.Shared.Entities.Facility facility = new BlazorPwaApp.Shared.Entities.Facility { District = new BlazorPwaApp.Shared.Entities.District() };

   protected override async Task OnInitializedAsync()
   {
      btnText = Id == null ? "Save New Facility" : "Update Facility";
      await FacilityService.GetDistricts();
   }

   protected override async Task OnParametersSetAsync()
   {
      if (Id == null)
      {
         facility.District = FacilityService.Districts[0];
         facility.DistrictId = facility.District.Oid;
      }
      else
      {
         facility = await FacilityService.GetSingleFacility((int)Id);
      }
   }

   async Task HandleSubmit()
   {
      if (Id == null)
      {
         await FacilityService.CreateFacility(facility);
      }
      else
      {
         await FacilityService.UpdateFacility(facility);
      }
   }

   async Task DeleteFacility()
   {
      await FacilityService.DeleteFacility(facility.Oid);
   }

   private void GoToFacilityPage()
   {
      NavigationManager.NavigateTo("/Facilities");
   }
}