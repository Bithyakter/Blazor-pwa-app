@page "/createprovince"
@page "/createprovince/{id:int}"
@layout MainLayout
@inject IJSRuntime JsRuntime
@inject IProvinceService ProvinceService
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <PageTitle>Create a new Province</PageTitle>
   <h3>Create a new Province</h3>
}
else
{
    <PageTitle>Edit @province.ProvinceName</PageTitle>
    <h3>Edit @province.ProvinceName</h3>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
   <p class="text-danger">@ErrorMessage</p>
}

<div class="row">
   <div class="col-md-10">
      <div class="card">
         <div class="card-header">
            <Span>Province</Span>
         </div>
         <div class="card-body ps-5 pe-5 mb-4">

            <EditForm Model="province" OnSubmit="HandleSubmit">
               <DataAnnotationsValidator />

               <div class="mt-3">
                  <label class="required">Country</label><br />
                  <InputSelect @bind-Value="province.CountryId" class="form-select">
                     @foreach (var country in ProvinceService.Countries)
                     {
                        <option value="@country.Oid">@country.CountryName</option>
                     }
                  </InputSelect>
                  <ValidationMessage For="@(() => province.Country.CountryName)" />
               </div>

                <div class="mt-3">
                     <label for="ProvinceName" class="required">Province Name</label>
                     <InputText id="ProvinceName" @bind-Value="province.ProvinceName" class="form-control"></InputText>
                     <ValidationMessage For="@(() => province.ProvinceName)" />
                </div> 

                <br />

               <button type="submit" class="btn btn-primary">@btnText</button>
               @*@if (Id != null)
               {
                  <button type="button" class="btn btn-danger mx-2" @onclick="DeleteProvince">Delete Province</button>
               }
               else
               {*@
                  <button type="button" class="btn btn-danger mx-2" @onclick="GoToProvincePage">Back</button>
               @*}*@
            </EditForm>

         </div>
      </div>
   </div>
</div>

@code {
   [Parameter]
   public int? Id { get; set; }

   string btnText = string.Empty;
   string ErrorMessage = string.Empty;

   //Province province = new Province { Country = new Country() };
   BlazorPwaApp.Shared.Entities.Province province = new BlazorPwaApp.Shared.Entities.Province { Country = new BlazorPwaApp.Shared.Entities.Country() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Province" : "Update Province";
        await ProvinceService.GetCountries();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            province.Country = ProvinceService.Countries[0];
            province.CountryId = province.Country.Oid;
        }
        else
        {
            province = await ProvinceService.GetSingleProvince((int)Id);
        }
    }

    async Task HandleSubmit()
    {    
         if (Id == null)
         {
            try
            {
               await ProvinceService.CreateProvince(province);

               await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
               NavigationManager.NavigateTo("provinces");
            }
            catch (Exception ex)
            {
               ErrorMessage = "Please fill in all required fields.";
            }
         }
         else
         {
            await ProvinceService.UpdateProvince(province);
            await JsRuntime.InvokeVoidAsync("alert", "Updated Successfully!");
         }
    }

    async Task DeleteProvince()
    {
       await ProvinceService.DeleteProvince(province.Oid);
    }

   private void GoToProvincePage()
   {
      NavigationManager.NavigateTo("/Provinces");
   }
}