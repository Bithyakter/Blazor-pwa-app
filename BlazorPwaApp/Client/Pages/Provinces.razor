@page "/provinces"
@using BlazorPwaApp.Shared.Entities;
@layout MainLayout
@inject IProvinceService ProvinceService
@inject IJSRuntime js
@inject NavigationManager NavigationManager

<PageTitle>Provinces</PageTitle>

<h3>Provinces</h3>

@*<button class="btn btn-primary" @onclick="CreateNewProvince">Create New Province</button>*@

<div class="row">
   <div class="col-md-8">
      <button class="btn btn-primary" @onclick="CreateNewProvince"><i class="fas fa-user-plus"></i> Create New Province</button>
   </div>

   <div class="input-group col">
      <input type="text" class="form-control" placeholder="Search province by name"
      @bind="SearchString" @bind:event="oninput" @onkeyup="FilterProvince" />
      @if (SearchString.Length > 0)
      {
         <div class="input-group-append">
            <button class="btn btn-danger" @onclick="ResetSearch" style="font-size: 12px; margin-top: 5px; margin-left: 5px;">
               <i class="oi oi-reload"></i>
            </button>
         </div>
      }
   </div>
</div>

@if (list != null)
{
   <table class="table">

      <thead>
         <tr>
            <th>Country</th>
            <th>Province Name</th>         
            <th></th>
         </tr>
      </thead>

      <tbody>
         @foreach (var province in list)
         {
            <tr>
               <td>@province?.Country?.CountryName</td>
               <td>@province.ProvinceName</td>
               <td>
                  <button class="btn btn-primary" @onclick="(() => ShowProvince(province.Oid))"><i class="oi oi-pencil"></i></button>
                  <button type="button" class="btn btn-danger mx-2" @onclick="(() => ConfirmDelete(province.Oid, province.ProvinceName))"><i class="oi oi-delete"></i></button>
               </td>
            </tr>
         }
      </tbody>

   </table>
}

@code {
   protected List<Province> list = new List<Province>();

   protected List<Province> searchProvinceData = new();
   protected string SearchString { get; set; } = string.Empty;

   protected override async Task OnInitializedAsync()
   {
      await LoadProvinces();
   }

   private async Task LoadProvinces()
   {
      var provinces = await ProvinceService.GetProvinces();
      list = provinces;
      searchProvinceData = provinces;
   }

   protected void FilterProvince()
   {
      if (!string.IsNullOrEmpty(SearchString))
      {
         list = searchProvinceData
             .Where(x => x.ProvinceName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
             .ToList();
      }
      else
      {
         list = searchProvinceData;
      }
   }

   public void ResetSearch()
   {
      SearchString = string.Empty;
      list = searchProvinceData;
   }

   void ShowProvince(int id)
   {
      NavigationManager.NavigateTo($"createprovince/{id}");
   }

   void CreateNewProvince()
   {
      NavigationManager.NavigateTo("/createprovince");
   }

   async Task ConfirmDelete(int id, string province)
   {
      if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {province}'s ({id}) Record?"))
      {
         await ProvinceService.DeleteProvince(id);

         var deletedProvince = list.FirstOrDefault(c => c.Oid == id);

         if (deletedProvince != null)
         {
            list.Remove(deletedProvince);
         }
      }
   }

   //protected override async Task OnInitializedAsync()
   //{
   //   await ProvinceService.GetProvinces();
   //}
}