@page "/createdistrict"
@page "/createdistrict/{id:int}"
@using BlazorPwaApp.Shared.Entities;
@layout MainLayout
@inject IJSRuntime JsRuntime
@inject IDistrictService DistrictService
@inject NavigationManager NavigationManager

@if (Id == null)
{
   <PageTitle>Create a new District</PageTitle>
   <h3>Create a new District</h3>
}
else
{
   <PageTitle>Edit @district.DistrictName</PageTitle>
   <h3>Edit @district.DistrictName</h3>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
   <p class="text-danger">@ErrorMessage</p>
}

<div class="row">
   <div class="col-md-10">
      <div class="card">
         <div class="card-header">
            <Span>District</Span>
         </div>

         <div class="card-body ps-5 pe-5 mb-4">
            <EditForm Model="district" OnSubmit="HandleSubmit">
               <DataAnnotationsValidator />

               <div class="mt-3">
                  <label class="required">Country</label><br />
                  <select @onchange="OnCountryChange" class="form-select">
                     <option value="">Select a country</option>
                     @foreach (var country in DistrictService.Countries)
                     {
                        <option value="@country.Oid">@country.CountryName</option>
                     }
                  </select>
               </div>

               <div class="mt-3">
                  <label class="required">Province</label><br />
                  <select @bind="district.ProvinceId" class="form-select">
                     <option value="">Select a province</option>
                     @foreach (var province in DistrictService.Provinces.Where(p => p.CountryId == selectedCountryId))
                     {
                        <option value="@province.Oid">@province.ProvinceName</option>
                     }
                  </select>
                  <ValidationMessage For="@(() => district.Province.ProvinceName)" />
               </div>

               <div class="mt-3">
                  <label for="DistrictName" class="required">District Name</label>
                  <InputText id="DistrictName" @bind-Value="district.DistrictName" class="form-control"></InputText>
                  <ValidationMessage For="@(() => district.DistrictName)" />
               </div>

               <br />

               <button type="submit" class="btn btn-primary">@btnText</button>
               <button type="button" class="btn btn-danger mx-2" @onclick="GoToDistrictPage">Back</button>

            </EditForm>
         </div>
      </div>
   </div>
</div>

@code {
   [Parameter]
   public int? Id { get; set; }

   string btnText = string.Empty;
   string ErrorMessage = string.Empty;

   private int selectedCountryId;

   District district = new District { Province = new Province() };

   protected override async Task OnInitializedAsync()
   {
      btnText = Id == null ? "Save New District" : "Update District";
      await DistrictService.GetProvinces();
      await DistrictService.GetCountries();
   }

   protected override async Task OnParametersSetAsync()
   {
      if (Id == null)
      {
         district.Province = DistrictService.Provinces[0];
         district.ProvinceId = district.Province.Oid;
      }
      else
      {
         district = await DistrictService.GetSingleDistrict((int)Id);
         selectedCountryId = district.Province.CountryId;
      }
   }

   async Task HandleSubmit()
   {
      if (Id == null)
      {
         try
         {
            await DistrictService.CreateDistrict(district);

            await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
            NavigationManager.NavigateTo("districts");
         }
         catch (Exception ex)
         {
            ErrorMessage = "Please fill in all required fields.";
         }
      }
      else
      {
         await DistrictService.UpdateDistrict(district);
         await JsRuntime.InvokeVoidAsync("alert", "Updated Successfully!");
      }
   }

   async Task DeleteDistrict()
   {
      await DistrictService.DeleteDistrict(district.Oid);
   }

   private void GoToDistrictPage()
   {
      NavigationManager.NavigateTo("/Districts");
   }

   private void OnCountryChange(ChangeEventArgs e)
   {
      if (int.TryParse(e.Value.ToString(), out int selectedCountryId))
      {
         district.ProvinceId = 0;
         this.selectedCountryId = selectedCountryId;
      }
      else
      {
         this.selectedCountryId = 0;
      }
   }
}