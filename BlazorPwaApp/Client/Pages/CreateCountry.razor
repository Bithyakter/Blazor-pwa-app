@page "/createcountry"
@page "/createcountry/{id:int}"
@layout MainLayout
@inject ICountryService CountryService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@using BlazorPwaApp.Shared.Entities
@using Microsoft.AspNetCore.Components.Forms
@using static BlazorPwaApp.Client.Services.CountryService.CountryService;
@using System.ComponentModel.DataAnnotations

@if (Id == null)
{
   <PageTitle>Create a new Country</PageTitle>
   <h3>Create a new Country</h3>
}
else
{
   <PageTitle>Edit @country.CountryName</PageTitle>
   <h3>Edit @country.CountryName</h3>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
   <p class="text-danger">@ErrorMessage</p>
}

<div class="row">
   <div class="col-md-10">
      <div class="card">
         <div class="card-header">
            <Span>Country</Span>
         </div>
         <div class="card-body ps-5 pe-5 mb-4">

            <EditForm Model="country" OnSubmit="HandleSubmit">
               <DataAnnotationsValidator />

               <div class="mt-3">
                  <label for="CountryName" class="required"> Country Name</label>
                  <InputText id="CountryName" @bind-Value="country.CountryName" class="form-control"></InputText>
                  <ValidationMessage For="@(() => country.CountryName)" />
               </div>

               <div class="mt-3">
                  <label for="CountryCode" class="required"> Country Code</label>
                  <InputText id="CountryCode" @bind-Value="country.CountryCode" class="form-control"></InputText>
                  <ValidationMessage For="@(() => country.CountryCode)" />
               </div>

               <div class="mt-3">
                  <label for="ISOCode2" class="required"> ISO Code 2</label>
                  <InputText id="ISOCode2" @bind-Value="country.ISOCode2" class="form-control"></InputText>
                  <ValidationMessage For="@(() => country.ISOCode2)" />
               </div>

               <br />

               <button type="submit" class="btn btn-primary">@btnText</button>

               @*@if (Id != null)
               {
                  <button type="button" class="btn btn-danger mx-2" @onclick="DeleteCountry">Delete Country</button>
               }
               else
               {*@
                  <button type="button" class="btn btn-danger mx-2" @onclick="GoToCountryPage">Back</button>
               @*}*@

            </EditForm>

         </div>
      </div>
   </div>
</div>

@code {
   [Parameter]
   public int? Id { get; set; }

   string btnText = string.Empty;
   string ErrorMessage = string.Empty;

   //Country country = new Country { };
   BlazorPwaApp.Shared.Entities.Country country = new BlazorPwaApp.Shared.Entities.Country();

   protected override async Task OnInitializedAsync()
   {
      btnText = Id == null ? "Save New Country" : "Update Country";
      
      await CountryService.GetCountries();
   }

   protected override async Task OnParametersSetAsync()
   {
      if (Id == null)
      {
         country = new BlazorPwaApp.Shared.Entities.Country();
      }
      else
      {
         country = await CountryService.GetSingleCountry((int)Id);
      }
   }

   async Task HandleSubmit()
   {
      //if (Id == null)
      //{
      //   await CountryService.CreateCountry(country);
      //}
      //else
      //{
      //   await CountryService.UpdateCountry(country);
      //}
      //try
      //{
      //   if (Id == null)
      //   {
      //      await CountryService.CreateCountry(country);
      //      //ErrorMessage = "Country created successfully!";
      //      //await Task.Delay(2000);
      //   }
      //   else
      //   {
      //      await CountryService.UpdateCountry(country);
      //   }        
      //}
      //catch (CountryNotFoundException ex)
      //{
      //   ErrorMessage = ex.Message;
      //}
      //catch (Exception ex)
      //{
      //   ErrorMessage = "An error occurred while creating the country.";
      //}

      if (Id == null)
      {
         try
         {
            await CountryService.CreateCountry(country);

            await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
            NavigationManager.NavigateTo("countries");
         }
         catch (Exception ex)
         {
            ErrorMessage = "Please fill in all required fields.";
         }
      }
      else
      {
         await CountryService.UpdateCountry(country);
         await JsRuntime.InvokeVoidAsync("alert", "Updated Successfully!");
      }
   }

   async Task DeleteCountry()
   {
      await CountryService.DeleteCountry(country.Oid);
   }

   private void GoToCountryPage()
   {
      NavigationManager.NavigateTo("/Countries");
   }
}