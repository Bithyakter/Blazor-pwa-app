@page "/createcountry"
@page "/createcountry/{id:int}"
@inject ICountryService CountryService
@inject NavigationManager NavigationManager
@using BlazorPwaApp.Shared.Entities;

@if (Id == null)
{
   <PageTitle>Create a new Country</PageTitle>
   <h3>Create a new Country</h3>
}
else
{
   <PageTitle>Edit @country.CountryName</PageTitle>
   <h3>Edit @country.CountryName</h3>
}

<EditForm Model="country" OnSubmit="HandleSubmit">
   <div class="mt-3">
      <label for="countryName">Country Name</label>
      <InputText id="countryName" @bind-Value="country.CountryName" class="form-control"></InputText>
      <ValidationMessage For="@(() => country.CountryName)" />
   </div>

   <div class="mt-3">
      <label for="countryCode">Country Code</label>
      <InputText id="countryCode" @bind-Value="country.CountryCode" class="form-control"></InputText>
      <ValidationMessage For="@(() => country.CountryCode)" />
   </div>

   <div class="mt-3">
      <label for="isoCode2">ISO Code 2</label>
      <InputText id="isoCode2" @bind-Value="country.ISOCode2" class="form-control"></InputText>
      <ValidationMessage For="@(() => country.ISOCode2)" />
   </div>

   <br />

   <button type="submit" class="btn btn-primary">@btnText</button>

   @if (Id != null)
   {
      <button type="button" class="btn btn-danger mx-2" @onclick="DeleteCountry">Delete Country</button>
   }
   else
   {
      <button type="button" class="btn btn-danger mx-2" @onclick="GoToCountryPage">Back</button>
   }
</EditForm>

@code {
   [Parameter]
   public int? Id { get; set; }

   string btnText = string.Empty;

   //Country country = new Country { };
   BlazorPwaApp.Shared.Entities.Country country = new BlazorPwaApp.Shared.Entities.Country();

   protected override async Task OnInitializedAsync()
   {
      btnText = Id == null ? "Save New Country" : "Update Country";
      await CountryService.GetCountries();
   }

   protected override async Task OnParametersSetAsync()
   {
      if (Id == null)
      {
         country = new BlazorPwaApp.Shared.Entities.Country();
      }
      else
      {
         country = await CountryService.GetSingleCountry((int)Id);
      }
   }

   async Task HandleSubmit()
   {
      if (Id == null)
      {
         await CountryService.CreateCountry(country);
      }
      else
      {
         await CountryService.UpdateCountry(country);
      }
   }

   async Task DeleteCountry()
   {
      await CountryService.DeleteCountry(country.Oid);
   }

   private void GoToCountryPage()
   {
      NavigationManager.NavigateTo("/Countries");
   }
}